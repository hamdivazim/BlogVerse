{
  "posts": [
    {
      "title": "Welcome!",
      "description": "Welcome to my new blog!",
      "read-time": "1",
      "content": "Hello everyone! I'm glad to have you visiting my blog! From time to time I'll post some tips or a project idea or something interesting! \u003ch2\u003eWho am I?\u003c/h2\u003e \u003cp\u003e I'm Hamd, a twelve year old who works in Swift, Python, Web Dev, Data Science, and more! I love exploring new things and playing around with AI! You can learn more about me \u003ca href=\"about.html\"\u003ehere\u003c/a\u003e \u003c/p\u003e \u003ch2\u003eWhat will I write about?\u003c/h2\u003e A lot! Sometimes it'll be tutorials, maybe a quick tip, maybe I might just tell you something I stumbled across! Soon, you'll be able to find a lot on this blog :) \u003cp\u003eThanks again for visiting my blog, and I hope you'll learn something new here!",
      "date": "18/08/2022",
      "id": 1
    },
    {
      "title": "Python Lambdas",
      "description": "How inline, temporary function work in Python and how they are used",
      "read-time": "3",
      "content": "<p> Methods are an essential part of programming, and that's no different in Python. But sometimes, there are situations in which it'll be a hassle to define a whole function, or you'll only use the method once and it will make the file unnecessarily large. This is where <b>lambdas</b> become useful!</p> <p>Lambdas are a quick one-line way to define a method, and they are <em>anonymous</em>, which means they do not have a name, unlike a typical function.  Let's see how they look:  <div class='code-box'><span class='keyname'>my_lambda</span> = <span class='keyword'>lambda</span <span class='variable'>arg1, arg2: arg1+arg2</span> <br><br> <span class='keyname'>print</span>(<span class='keyname'>my_lambda</span>(<span class='variable'>2</span>, <span class='variable'>3</span>))</div> <p>We are creating a variable called <span class='codeline'>my_lambda</span> that holds the lambda. When we call it (<span class='codeline'>my_lambda()</span>) we execute the lambda method, which adds two values together. Now let's look into the syntax of lambdas. </p> <p>First we use the <span class='codeline'>lambda</span> keyword and then provide parameters. We list them the same way as a normal method: comma seperated. Optionally, you can provide a default value by putting an equal symbol then the default value, just like a normal function. After providing the arguments, put a colon, and then the return value. In the code block above, we added the two parameters together. <h2>Use Cases</h2> <p>When would you use a lambda?</p> <p>One of the ways I use a lambda quite often, is when I want to trigger another function. Say for example you had a tkinter button which should trigger the method <span class='codeline'>my_function(a, b)</span>. I can't provide parameters to the method in the button trigger, so I would use a simple lambda: </p> <div class='code-box'><span class='keyname'>command</span>=<span class='keyword'>lambda</span>: <span class='keyname'>my_function</span>(1, 2) </div> <p>In this scenario, I only want to use this lambda once and it also allows me to provide arguments to my method, so it is a great and simple solution!</p> <p>I hope you learnt something new about lambdas today! Thanks for reading :)</p>",
      "date": "22/08/2023",
      "id": 2
    },
    {
      "title": "Test Post 3",
      "description": "Description of test post 3",
      "read-time": "3",
      "content": "Here is some sample code: \u003cdiv class='code-box'\u003e \u003cspan class='keyword' \u003e var \u003c/span\u003e  \u003cspan class='keyname'\u003e foo \u003c/span\u003e = \u003cspan class='variable'\u003e 12\u003c/span\u003e; \u003cbr\u003e\u003cbr\u003e   \u003cspan class='keyword'\u003e function \u003c/span\u003e \u003cspan class='keyname'\u003ebar\u003c/span\u003e() { \u003cbr\u003e\u003cbr\u003e } \u003c/div\u003e Thanks for reading this test post!",
      "date": "01/01/2024",
      "id": 3
    }      
   ],
  "num": 3
}
