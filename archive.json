{
  "posts": [
    {
      "title": "Welcome!",
      "description": "Welcome to my new blog!",
      "read-time": "1",
      "content": "Hello everyone! I'm glad to have you visiting my blog! From time to time I'll post some tips or a project idea or something interesting! \u003ch2\u003eWho am I?\u003c/h2\u003e \u003cp\u003e I'm Hamd, a twelve year old who works in Swift, Python, Web Dev, Data Science, and more! I love exploring new things and playing around with AI! You can learn more about me \u003ca href=\"about.html\"\u003ehere\u003c/a\u003e \u003c/p\u003e \u003ch2\u003eWhat will I write about?\u003c/h2\u003e A lot! Sometimes it'll be tutorials, maybe a quick tip, maybe I might just tell you something I stumbled across! Soon, you'll be able to find a lot on this blog :) \u003cp\u003eThanks again for visiting my blog, and I hope you'll learn something new here!",
      "date": "18/08/2022",
      "id": 1
    },
    {
      "title": "Python Lambdas",
      "description": "How lambdas in Python work and how they are used",
      "read-time": "3",
      "content": "<p> Methods are an essential part of programming, and that's no different in Python. But sometimes, there are situations in which it'll be a hassle to define a whole function, or you'll only use the method once and it will make the file unnecessarily large. This is where <b>lambdas</b> become useful!</p> <p>Lambdas are a quick one-line way to define a method, and they are <em>anonymous</em>, which means they do not have a name, unlike a typical function.  Let's see how they look:  <div class='code-box'><span class='keyname'>my_lambda</span> = <span class='keyword'>lambda </span <span class='variable'>arg1, arg2: arg1+arg2</span> <br><br> <span class='keyname'>print</span>(<span class='keyname'>my_lambda</span>(<span class='variable'>2</span>, <span class='variable'>3</span>))</div> <p>We are creating a variable called <span class='codeline'>my_lambda</span> that holds the lambda. When we call it (<span class='codeline'>my_lambda()</span>) we execute the lambda method, which adds two values together. Now let's look into the syntax of lambdas. </p> <p>First we use the <span class='codeline'>lambda</span> keyword and then provide parameters. We list them the same way as a normal method: comma seperated. Optionally, you can provide a default value by putting an equal symbol then the default value, just like a normal function. After providing the arguments, put a colon, and then the return value. In the code block above, we added the two parameters together. <h2>Use Cases</h2> <p>When would you use a lambda?</p> <p>One of the ways I use a lambda quite often, is when I want to trigger another function. Say for example you had a tkinter button which should trigger the method <span class='codeline'>my_function(a, b)</span>. I can't provide parameters to the method in the button trigger, so I would use a simple lambda: </p> <div class='code-box'>..., <span class='keyname'>command</span>=<span class='keyword'>lambda</span>: <span class='keyname'>my_function</span>(1, 2), ... </div> <p>In this scenario, I only want to use this lambda once and it also allows me to provide arguments to my method, so it is a great and simple solution!</p> <p>I hope you learnt something new about lambdas today! Thanks for reading :)</p>",
      "date": "22/08/2023",
      "id": 2
    },
    {
      "title": "Swift vs. Kotlin - What's the difference?",
      "description": "A detailed analysis of the differences between Swift & Kotlin",
      "read-time": "4",
      "content": "<p>When it comes to mobile app development, the choice of a programming language can greatly impact the success of your project. Swift and Kotlin are two of the most prominent languages in this field. In this blog post, we'll explore the key differences between Swift and Kotlin to help you make an informed decision.</p> <h2>Swift: The Apple Ecosystem</h2> <p><strong>Swift</strong> is Apple's programming language, designed for developing applications on iOS, macOS, watchOS, and tvOS. It's known for its elegant syntax and robust type system. Here's what sets Swift apart:</p> <ul> <li><strong>Strong Typing:</strong> Swift boasts a strong type system, helping catch errors at compile-time, making it a safe choice for Apple's ecosystem.</li> <li><strong>Interoperability:</strong> Swift can work seamlessly with Objective-C, which is crucial for projects with existing Objective-C codebases.</li> <li><strong>Safety:</strong> Swift places a strong emphasis on memory safety, reducing the likelihood of common programming errors like null pointer dereferences.</li> </ul> <h2>Kotlin: The Android Powerhouse</h2> <p><strong>Kotlin</strong> is the official language for Android app development, developed by JetBrains and endorsed by Google. It has rapidly gained popularity among Android developers for several reasons:</p> <ul> <li><strong>Conciseness:</strong> Kotlin's concise syntax reduces boilerplate code, making it easier to read and write.</li> <h2>Conclusion</h2> <p>In this blog post, we've explored the differences between Swift and Kotlin, two prominent programming languages for mobile app development. While both languages have their strengths, your choice should primarily depend on your target platform. Swift excels in the Apple ecosystem, while Kotlin is the go-to language for Android development.</p> <p>Understanding the nuances of each language is vital when deciding which one to use for your next project. By considering the factors mentioned in this post, you can make an informed decision that aligns with your development goals. Whether you're developing for iOS or Android, choosing the right language is a critical step in ensuring the success of your project. Thank you for reading!</p>",
      "date": "01/11/2023",
      "id": 3
    }
  ],
  "num": 3
}
